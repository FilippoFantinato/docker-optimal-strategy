#!/bin/bash

n=
plant=
formula=
controller=

c_var="c"
u_vars=()

generate_module() {
    k=$(( n - 1 ))
    echo -e "MODULE main\nIVAR" >> $formula
    echo -e "\t$c_var : boolean;" >> $formula
    for i in `seq 0 $k`; do
        echo -e "\t${u_vars[i]} : boolean;" >> $formula
    done
}

generate_next() {
    times=$1
    next=""
    for i in `seq 1 $times`; do
        next="$next X"
    done
    echo $next
}

generate_ltl_spec() {
    ltlspec="(!$c_var)U($c_var <-> ${u_vars[0]})"
    k=$((n - 1))
    for i in `seq 1 $k`; do
        next=`generate_next $i`
        ltlspec="$ltlspec & $next((!$c_var)U($c_var <-> ${u_vars[0]}))"
    done
    echo -e "LTLSPEC $ltlspec"
}

generate_comments() {
    c_comment="--OUTPUT : $c_var"
    u_comment="--INPUT : "
    k=$((n - 1))
    for i in `seq 0 $((k - 1))`; do
        u_comment="$u_comment${u_vars[i]},"
    done
    u_comment="$u_comment${u_vars[k]}"
    echo $c_comment >> $formula
    echo $u_comment >> $formula
}

generate_formula() {
    generate_module
    echo `generate_ltl_spec` >> $formula
    generate_comments
}

generate_plant() {
    echo "MODULE plant($c_var)" >> $plant
    echo "VAR" >> $plant
    for u in "${u_vars[@]}"; do
        echo -e "\t$u : boolean;" >> $plant
    done
    echo "ASSIGN" >> $plant
    for i in "${!u_vars[@]}"; do
        v=
        if [ "$((i % 2))" -eq 1 ]; then
            v="TRUE"
        else
            v="FALSE"
        fi
        u=${u_vars[i]}
        echo -e "\tinit($u) := $v;" >> $plant
        echo -e "\tnext($u) := !$u;" >> $plant
    done
}

generate_controller() {
    us=""
    for i in "${!u_vars[@]}"; do
        us="$us${u_vars[i]}"
        if [ "$((i + 1))" -ne "${#u_vars[@]}" ]; then
            us="$us,"
        fi
    done
    echo "MODULE controller($us)" > $controller
    echo "VAR" >> $controller
    echo -e "\t$c_var : boolean;" >> $controller
    echo -e "\tsteps: 0..$((n-1))" >> $controller
    echo -e "ASSIGN" >> $controller
    echo -e "\t$c_var := case" >> $controller
    for i in `seq 0 $((n-1))`; do
        echo -e "\t\tsteps=$i : ${u_vars[i]};" >> $controller
    done
    echo -e "\t\telse : c;" >> $controller;
    echo -e "\tesac;" >> $controller;
    echo -e "\tinit(steps) := 0;" >> $controller;
    echo -e "\tnext(steps) := case steps < $((n-1)) : steps + 1; else : steps; esac;" >> $controller

    echo `generate_ltl_spec` >> $controller
}

main() {
    if [ -f "$formula" ]; then
        rm -f $formula
    fi
    if [ -f "$controller" ]; then
        rm -f $controller
    fi
    if [ -f "$plant" ]; then
        rm -f $plant
    fi

    k=$(( n - 1 ))
    for i in `seq 0 $k`; do
        c_vars+=( "c$i" )
        u_vars+=( "u$i" )
    done
    
    generate_formula
    generate_controller
    generate_plant
}

usage() {
    echo "Usage: generate-both-multiple -n number --formula path"
}

while [ $# -gt 0 ]; do
  case $1 in
    -h | --help)
        usage
        exit 0
        ;;
    -f | --formula)
        formula=$2
        shift 2
        ;;
    -c | --controller)
        controller=$2
        shift 2
        ;;
    -p | --plant)
        plant=$2
        shift 2
        ;;
    -n)
        n=$2
        shift 2
        ;;
    --) 
        shift 
        break ;;
    *) >&2 echo Unsupported option: $1
       usage 
       exit 1
       ;;
  esac
done

if [ -z "$n" ] || [ -z "$plant" ] || [ -z "$controller" ]; then
    usage
    exit 1
fi

main
