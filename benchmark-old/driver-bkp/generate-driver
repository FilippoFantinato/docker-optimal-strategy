#/bin/bash

n=
cosafety=0

plant="car-$n-plant.smv"
if [[ $cosafety -eq 1 ]]; then
    plant="./co-safety/$plant"
else
    plant="./safety/$plant"
fi

controller="car-$n-controller.smv"
if [[ $cosafety -eq 1 ]]; then
    controller="./co-safety/$controller"
else
    controller="./safety/$controller"
fi

generate_plant() {
    echo -e "MODULE Machine(move0, move1, move2, move3)" > $plant
    echo -e "VAR" >> $plant
    echo -e "    x : 0..width;" >> $plant
    echo -e "    y : 0..height;" >> $plant
    echo -e "DEFINE" >> $plant
    echo -e "    move_up := !move3 & !move2 & !move1 & !move0;" >> $plant
    echo -e "    move_down := !move3 & !move2 & !move1 & move0;" >> $plant
    echo -e "    move_right := !move3 & !move2 & move1 & !move0;" >> $plant
    echo -e "    move_left := !move3 & !move2 & move1 & move0;" >> $plant
    echo -e "    move_right_up := !move3 & move2 & !move1 & !move0;" >> $plant
    echo -e "    move_right_down := !move3 & move2 & !move1 & move0;" >> $plant
    echo -e "    move_left_up := !move3 & move2 & move1 & !move0;" >> $plant
    echo -e "    move_left_down := !move3 & move2 & move1 & move0;" >> $plant
    echo -e "    move_stop := move3 & !move2 & !move1 & !move0;" >> $plant
    echo -e "    height := $n;" >> $plant
    echo -e "    width  := $n;" >> $plant
    echo -e "    starting_x := 0;" >> $plant
    echo -e "    starting_y := 0;" >> $plant
    echo -e "ASSIGN" >> $plant
    echo -e "    init(x) := starting_x;" >> $plant
    echo -e "    init(y) := starting_y;" >> $plant
    echo -e "ASSIGN" >> $plant
    echo -e "    next(x) := case" >> $plant
    echo -e "        (move_right | move_right_up | move_right_down) & x<width : x + 1;" >> $plant
    echo -e "        (move_left | move_left_up | move_left_down) & x>0 : x - 1;" >> $plant
    echo -e "        TRUE : x;" >> $plant
    echo -e "    esac;" >> $plant
    echo -e "    next(y) := case" >> $plant
    echo -e "        (move_up | move_left_up | move_right_up) & y<height : y + 1;" >> $plant
    echo -e "        (move_down | move_left_down | move_right_down) & y>0  : y - 1;" >> $plant
    echo -e "        TRUE : y;" >> $plant
    echo -e "    esac;"  >> $plant
}

generate_controller() {
    echo -e "MODULE Driver(x,y)" > $controller
    echo -e "VAR" >> $controller
    echo -e "   move0: boolean;" >> $controller
    echo -e "   move1: boolean;" >> $controller
    echo -e "   move2: boolean;" >> $controller
    echo -e "   move3: boolean;" >> $controller
    
    echo -e "   state: 0..$n;" >> $controller


    echo -e "DEFINE" >> $controller
    for i in `seq 0 $n`; do
        echo -e "   goal$i := $i;" >> $controller
        echo -e "   s$i := (x = goal$i & y = goal$i);" >> $controller
    done
    echo -e "ASSIGN" >> $controller
    echo -e "move0 := case" >> $controller
    for i in `seq 0 $n`; do
        echo -e "   state=$i: case" >> $controller
        echo -e "       x < goal$i  : false;" >> $controller
        echo -e "       x > goal$i  : true;" >> $controller
        echo -e "       y < goal$i  : false;" >> $controller
        echo -e "       y > goal$i  : true;" >> $controller
        echo -e "       TRUE : false;" >> $controller
        echo -e "   esac;" >> $controller
    done
    echo -e "   TRUE: move0;" >> $controller
    echo -e "esac;" >> $controller

    echo -e "move1 := case" >> $controller
    for i in `seq 0 $n`; do
        echo -e "   state=$i: case" >> $controller
        echo -e "       x < goal$i  : true;" >> $controller
        echo -e "       x > goal$i  : true;" >> $controller
        echo -e "       y < goal$i  : false;" >> $controller
        echo -e "       y > goal$i  : false;" >> $controller
        echo -e "       TRUE : false;" >> $controller
        echo -e "   esac;" >> $controller
    done
    echo -e "   TRUE: move1;" >> $controller
    echo -e "esac;" >> $controller

    echo -e "move2 := case" >> $controller
    for i in `seq 0 $n`; do
        echo -e "   state=$i: case" >> $controller
        echo -e "       x < goal$i  : false;" >> $controller
        echo -e "       x > goal$i  : false;" >> $controller
        echo -e "       y < goal$i  : false;" >> $controller
        echo -e "       y > goal$i  : false;" >> $controller
        echo -e "       TRUE : false;" >> $controller
        echo -e "   esac;" >> $controller
    done
    echo -e "   TRUE: move2;" >> $controller
    echo -e "esac;" >> $controller

    echo -e "move3 := case" >> $controller
    for i in `seq 0 $n`; do
        echo -e "   state=$i: case" >> $controller
        echo -e "       x < goal$i  : false;" >> $controller
        echo -e "       x > goal$i  : false;" >> $controller
        echo -e "       y < goal$i  : false;" >> $controller
        echo -e "       y > goal$i  : false;" >> $controller
        echo -e "       TRUE : true;" >> $controller
        echo -e "   esac;" >> $controller
    done
    echo -e "   TRUE: move3;" >> $controller
    echo -e "esac;" >> $controller

    echo -e "init(state) := 1;" >> $controller
 
    if [[ $cosafety -eq 1 ]]; then
        echo -e "next(state) := case" >> $controller
        for i in `seq 1 $((n-1))`; do
            echo -e "   s$i: $((i+1));" >> $controller
        done
        echo -e "   TRUE: state;" >> $controller
        echo -e "esac;" >> $controller
    else
        echo -e "next(state) := case" >> $controller
        for i in `seq 1 $((n-1))`; do
            echo -e "   s$i: $((i+1));" >> $controller
        done
        echo -e "   s$n: 0" >> $controller
        echo -e "   TRUE: state;" >> $controller
        echo -e "esac;" >> $controller
    fi
}

generate_ltlspec_cosafety() {
    ltlspec="F s1"
    for i in `seq 2 $n`; do
        ltlspec="$ltlspec & F s$i"
    done

    # for i in `seq 1 $n`; do
    #     ltlspec="$ltlspec)"
    # done
    
    echo -e "LTLSPEC $ltlspec" >> $controller
}

generate_ltlspec_safety() {
    ltlspec="G (s0 -> F[0,6] s1)"
    for i in `seq 2 $n`; do
        ltlspec="$ltlspec & G (s$((i-1)) -> F[0,6] s$i)"
    done

    ltlspec="$ltlspec & G(s$i -> F[0,6] s0)"
    
    echo -e "LTLSPEC $ltlspec" >> $controller
}

generate_synth_param_cosafety() {
    synth_param="F (s1 & time<=maxtime)"
    for i in `seq 2 $n`; do
        synth_param="$synth_param & F (s$i & time<=maxtime)"
    done

    echo -e "VAR       time: 0..$n;" >> $controller
    echo -e "FROZENVAR maxtime: 0..$n;" >> $controller
    echo -e "ASSIGN" >> $controller
    echo -e "  init(time) := 0;" >> $controller
    echo -e "  next(time) := case time < $n : time + 1; TRUE: time; esac;" >> $controller
    echo -e "  PARSYNTH r := { maxtime | VALID  $synth_param};" >> $controller
}

generate_synth_param_safety() {
    synth_param="G (s0 -> F[0,6] s1)"
    for i in `seq 2 $n`; do
        synth_param="$synth_param & G (s$((i-1)) -> F[0,6] s$i)"
    done
    synth_param="$synth_param & G(s$i -> F[0,6] s0) & G(time <= maxtime)"

    echo -e "VAR       time: 0..$n;" >> $controller
    echo -e "FROZENVAR maxtime: 0..$n;" >> $controller
    echo -e "ASSIGN" >> $controller
    echo -e "  init(time) := 0;" >> $controller
    echo -e "  next(time) := case" >> $controller
    states="s0"
    for i in `seq 1 $n`; do
    states="$states | s$i"
    done 
    echo -e "  $states : 0;" >> $controller
    echo -e "  time < $n : time + 1; TRUE: time; esac;" >> $controller
    echo -e "  PARSYNTH r := { maxtime | VALID  $synth_param};" >> $controller
}

main() {
    generate_plant
    generate_controller
    
    if [[ $cosafety -eq 1 ]]; then
        generate_ltlspec_cosafety
        generate_synth_param_cosafety
    else
        generate_ltlspec_safety
        generate_synth_param_safety
    fi
}

while [ $# -gt 0 ]; do
  case $1 in
    -h | --help)
        usage
        exit 0
        ;;
    -g | --goals)
        n=$2
        shift 2
        ;;
    --co-safety)
        cosafety=1
        shift
        ;;
    --) 
        shift 
        break ;;
    *) >&2 echo Unsupported option: $1
       usage 
       exit 1
       ;;
  esac
done

if [ -z "$n" ]; then
    usage
    exit 1
fi

main

