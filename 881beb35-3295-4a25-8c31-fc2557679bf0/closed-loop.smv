MODULE Plant(move0, move1, move2, move3)
VAR
    f_x0 : boolean;
    f_x1 : boolean;
    f_x2 : boolean;
    f_y0 : boolean;
    f_y1 : boolean;
    f_y2 : boolean;
    f_counter0 : boolean;
    d_x0 : boolean;
    d_x1 : boolean;
    d_x2 : boolean;
    d_y0 : boolean;
    d_y1 : boolean;
    d_y2 : boolean;
    d_counter0 : boolean;
    d_counter1 : boolean;
    c_x0 : boolean;
    c_x1 : boolean;
    c_x2 : boolean;
    c_y0 : boolean;
    c_y1 : boolean;
    c_y2 : boolean;
    c_counter0 : boolean;
    c_counter1 : boolean;
DEFINE
    move_up := !move3 & !move2 & !move1 & !move0;
    move_down := !move3 & !move2 & !move1 & move0;
    move_right := !move3 & !move2 & move1 & !move0;
    move_left := !move3 & !move2 & move1 & move0;
    move_right_up := !move3 & move2 & !move1 & !move0;
    move_right_down := !move3 & move2 & !move1 & move0;
    move_left_up := !move3 & move2 & move1 & !move0;
    move_left_down := !move3 & move2 & move1 & move0;
    move_stop := move3 & !move2 & !move1 & !move0;
ASSIGN
    init(f_counter0) := FALSE;
    init(d_counter0) := FALSE;
    init(d_counter1) := FALSE;
    init(c_counter0) := FALSE;
    init(c_counter1) := FALSE;
ASSIGN
    next(f_counter0) := !f_counter0; 
    next(d_counter0) := !d_counter0;
    next(d_counter1) := case 
        d_counter1 & d_counter0 : FALSE;
        d_counter1 & !d_counter0 : TRUE;
        !d_counter1 & d_counter0 : TRUE;
        TRUE : FALSE;
    esac;
    next(c_counter0) := !c_counter0;
    next(c_counter1) := case 
        c_counter1 & c_counter0 : FALSE;
        c_counter1 & !c_counter0 : TRUE;
        !c_counter1 & c_counter0 : TRUE;
        TRUE : FALSE;
    esac;
ASSIGN
    init(f_x0) := FALSE;
    init(f_x1) := FALSE;
    init(f_x2) := FALSE;
    init(f_y0) := FALSE;
    init(f_y1) := FALSE;
    init(f_y2) := FALSE;
    init(d_x0) := FALSE;
    init(d_x1) := FALSE;
    init(d_x2) := FALSE;
    init(d_y0) := TRUE;
    init(d_y1) := TRUE;
    init(d_y2) := TRUE;
    init(c_x0) := TRUE;
    init(c_x1) := TRUE;
    init(c_x2) := TRUE;
    init(c_y0) := TRUE;
    init(c_y1) := TRUE;
    init(c_y2) := TRUE;
ASSIGN
    next(f_x0) := case
        (!f_counter0) & (move_right | move_right_up | move_right_down) &  !(f_x0 & f_x1 & f_x2) : !f_x0;
        (!f_counter0) & (move_left | move_left_up | move_left_down) &  !(!f_x0 & !f_x1 & !f_x2) : !f_x0;
        TRUE : f_x0;
    esac;
    next(f_x1) := case
        (!f_counter0) & (move_right | move_right_up | move_right_down) & (f_x0) & !(f_x0 & f_x1 & f_x2) : !f_x1;
        (!f_counter0) & (move_left | move_left_up | move_left_down) & (!f_x0) & !(!f_x0 & !f_x1 & !f_x2) : !f_x1;
        TRUE : f_x1;
    esac;
    next(f_x2) := case
        (!f_counter0) & (move_right | move_right_up | move_right_down) & (f_x0 & f_x1) & !(f_x0 & f_x1 & f_x2) : !f_x2;
        (!f_counter0) & (move_left | move_left_up | move_left_down) & (!f_x0 & !f_x1) & !(!f_x0 & !f_x1 & !f_x2) : !f_x2;
        TRUE : f_x2;
    esac;
    next(f_y0) := case
        (!f_counter0) & (move_up | move_left_up | move_right_up) &  !(f_y0 & f_y1 & f_y2) : !f_y0;
        (!f_counter0) & (move_down | move_left_down | move_right_down) &  !(!f_y0 & !f_y1 & !f_y2) : !f_y0;
        TRUE : f_y0;
    esac;
    next(f_y1) := case
        (!f_counter0) & (move_up | move_left_up | move_right_up) & (f_y0) & !(f_y0 & f_y1 & f_y2) : !f_y1;
        (!f_counter0) & (move_down | move_left_down | move_right_down) & (!f_y0) & !(!f_y0 & !f_y1 & !f_y2) : !f_y1;
        TRUE : f_y1;
    esac;
    next(f_y2) := case
        (!f_counter0) & (move_up | move_left_up | move_right_up) & (f_y0 & f_y1) & !(f_y0 & f_y1 & f_y2) : !f_y2;
        (!f_counter0) & (move_down | move_left_down | move_right_down) & (!f_y0 & !f_y1) & !(!f_y0 & !f_y1 & !f_y2) : !f_y2;
        TRUE : f_y2;
    esac;

    next(d_x0) := case
        (!d_counter0 & !d_counter1) & (move_right | move_right_up | move_right_down) &  !(d_x0 & d_x1 & d_x2) : !d_x0;
        (!d_counter0 & !d_counter1) & (move_left | move_left_up | move_left_down) &  !(!d_x0 & !d_x1 & !d_x2) : !d_x0;
        TRUE : d_x0;
    esac;
    next(d_x1) := case
        (!d_counter0 & !d_counter1) & (move_right | move_right_up | move_right_down) & (d_x0) & !(d_x0 & d_x1 & d_x2) : !d_x1;
        (!d_counter0 & !d_counter1) & (move_left | move_left_up | move_left_down) & (!d_x0) & !(!d_x0 & !d_x1 & !d_x2) : !d_x1;
        TRUE : d_x1;
    esac;
    next(d_x2) := case
        (!d_counter0 & !d_counter1) & (move_right | move_right_up | move_right_down) & (d_x0 & d_x1) & !(d_x0 & d_x1 & d_x2) : !d_x2;
        (!d_counter0 & !d_counter1) & (move_left | move_left_up | move_left_down) & (!d_x0 & !d_x1) & !(!d_x0 & !d_x1 & !d_x2) : !d_x2;
        TRUE : d_x2;
    esac;
    next(d_y0) := case
        (!d_counter0 & !d_counter1) & (move_up | move_left_up | move_right_up) &  !(d_y0 & d_y1 & d_y2) : !d_y0;
        (!d_counter0 & !d_counter1) & (move_down | move_left_down | move_right_down) &  !(!d_y0 & !d_y1 & !d_y2) : !d_y0;
        TRUE : d_y0;
    esac;
    next(d_y1) := case
        (!d_counter0 & !d_counter1) & (move_up | move_left_up | move_right_up) & (d_y0) & !(d_y0 & d_y1 & d_y2) : !d_y1;
        (!d_counter0 & !d_counter1) & (move_down | move_left_down | move_right_down) & (!d_y0) & !(!d_y0 & !d_y1 & !d_y2) : !d_y1;
        TRUE : d_y1;
    esac;
    next(d_y2) := case
        (!d_counter0 & !d_counter1) & (move_up | move_left_up | move_right_up) & (d_y0 & d_y1) & !(d_y0 & d_y1 & d_y2) : !d_y2;
        (!d_counter0 & !d_counter1) & (move_down | move_left_down | move_right_down) & (!d_y0 & !d_y1) & !(!d_y0 & !d_y1 & !d_y2) : !d_y2;
        TRUE : d_y2;
    esac;

    next(c_x0) := case
        (!c_counter0 & !c_counter1) & (move_right | move_right_up | move_right_down) &  !(c_x0 & c_x1 & c_x2) : !c_x0;
        (!c_counter0 & !c_counter1) & (move_left | move_left_up | move_left_down) &  !(!c_x0 & !c_x1 & !c_x2) : !c_x0;
        TRUE : c_x0;
    esac;
    next(c_x1) := case
        (!c_counter0 & !c_counter1) & (move_right | move_right_up | move_right_down) & (c_x0) & !(c_x0 & c_x1 & c_x2) : !c_x1;
        (!c_counter0 & !c_counter1) & (move_left | move_left_up | move_left_down) & (!c_x0) & !(!c_x0 & !c_x1 & !c_x2) : !c_x1;
        TRUE : c_x1;
    esac;
    next(c_x2) := case
        (!c_counter0 & !c_counter1) & (move_right | move_right_up | move_right_down) & (c_x0 & c_x1) & !(c_x0 & c_x1 & c_x2) : !c_x2;
        (!c_counter0 & !c_counter1) & (move_left | move_left_up | move_left_down) & (!c_x0 & !c_x1) & !(!c_x0 & !c_x1 & !c_x2) : !c_x2;
        TRUE : c_x2;
    esac;
    next(c_y0) := case
        (!c_counter0 & !c_counter1) & (move_up | move_left_up | move_right_up) &  !(c_y0 & c_y1 & c_y2) : !c_y0;
        (!c_counter0 & !c_counter1) & (move_down | move_left_down | move_right_down) &  !(!c_y0 & !c_y1 & !c_y2) : !c_y0;
        TRUE : c_y0;
    esac;
    next(c_y1) := case
        (!c_counter0 & !c_counter1) & (move_up | move_left_up | move_right_up) & (c_y0) & !(c_y0 & c_y1 & c_y2) : !c_y1;
        (!c_counter0 & !c_counter1) & (move_down | move_left_down | move_right_down) & (!c_y0) & !(!c_y0 & !c_y1 & !c_y2) : !c_y1;
        TRUE : c_y1;
    esac;
    next(c_y2) := case
        (!c_counter0 & !c_counter1) & (move_up | move_left_up | move_right_up) & (c_y0 & c_y1) & !(c_y0 & c_y1 & c_y2) : !c_y2;
        (!c_counter0 & !c_counter1) & (move_down | move_left_down | move_right_down) & (!c_y0 & !c_y1) & !(!c_y0 & !c_y1 & !c_y2) : !c_y2;
        TRUE : c_y2;
    esac;
MODULE controller(f_x0,f_x1,f_x2,f_y0,f_y1,f_y2,c_x0,c_x1,c_x2,c_y0,c_y1,c_y2,d_x0,d_x1,d_x2,d_y0,d_y1,d_y2,f_counter0,d_counter0,d_counter1,c_counter0,c_counter1)
VAR
   move0: boolean;
   move1: boolean;
   move2: boolean;
   move3: boolean;
ASSIGN -- & (next(f_x2) != next(d_x2) | (next(f_x2) = next(d_x2) & next(f_x1) != next(d_x1)) | (next(f_x2) = next(d_x2) & next(f_x1) = next(d_x1) & next(f_x0) != next(d_x0)) | next(f_y2) != next(d_y2) | (next(f_y2) = next(d_y2) & next(f_y1) != next(d_y1)) | (next(f_y2) = next(d_y2) & next(f_y1) = next(d_y1) & next(f_y0) != next(d_y0)))
move0 := case
    ((!f_x2 & c_x2) | (f_x2 = c_x2 & !f_x1 & c_x1) | (f_x2 = c_x2 & f_x1 = c_x1 & !f_x0 & c_x0)) : FALSE;
    (f_x2 & !c_x2) | (f_x2 = c_x2 & f_x1 & !c_x1) | (f_x2 = c_x2 & f_x1 = c_x1 & f_x0 & !c_x0) : TRUE;
    (!f_y2 & c_y2) | (f_y2 = c_y2 & !f_y1 & c_y1) | (f_y2 = c_y2 & f_y1 = c_y1 & !f_y0 & c_y0) : FALSE;
    (f_y2 & !c_y2) | (f_y2 = c_y2 & f_y1 & !c_y1) | (f_y2 = c_y2 & f_y1 = c_y1 & f_y0 & !c_y0) : TRUE;
    TRUE : FALSE;
esac;
move1 := case
    (!f_x2 & c_x2) | (f_x2 = c_x2 & !f_x1 & c_x1) | (f_x2 = c_x2 & f_x1 = c_x1 & !f_x0 & c_x0) : TRUE;
    (f_x2 & !c_x2) | (f_x2 = c_x2 & f_x1 & !c_x1) | (f_x2 = c_x2 & f_x1 = c_x1 & f_x0 & !c_x0) : TRUE;
    (!f_y2 & c_y2) | (f_y2 = c_y2 & !f_y1 & c_y1) | (f_y2 = c_y2 & f_y1 = c_y1 & !f_y0 & c_y0) : FALSE;
    (f_y2 & !c_y2) | (f_y2 = c_y2 & f_y1 & !c_y1) | (f_y2 = c_y2 & f_y1 = c_y1 & f_y0 & !c_y0) : FALSE;
    TRUE : FALSE;
esac;
move2 := case
    (!f_x2 & c_x2) | (f_x2 = c_x2 & !f_x1 & c_x1) | (f_x2 = c_x2 & f_x1 = c_x1 & !f_x0 & c_x0) : FALSE;
    (f_x2 & !c_x2) | (f_x2 = c_x2 & f_x1 & !c_x1) | (f_x2 = c_x2 & f_x1 = c_x1 & f_x0 & !c_x0) : FALSE;
    (!f_y2 & c_y2) | (f_y2 = c_y2 & !f_y1 & c_y1) | (f_y2 = c_y2 & f_y1 = c_y1 & !f_y0 & c_y0) : FALSE;
    (f_y2 & !c_y2) | (f_y2 = c_y2 & f_y1 & !c_y1) | (f_y2 = c_y2 & f_y1 = c_y1 & f_y0 & !c_y0) : FALSE;
    TRUE : FALSE;
esac;
move3 := case
    (!f_x2 & c_x2) | (f_x2 = c_x2 & !f_x1 & c_x1) | (f_x2 = c_x2 & f_x1 = c_x1 & !f_x0 & c_x0) : FALSE;
    (f_x2 & !c_x2) | (f_x2 = c_x2 & f_x1 & !c_x1) | (f_x2 = c_x2 & f_x1 = c_x1 & f_x0 & !c_x0) : FALSE;
    (!f_y2 & c_y2) | (f_y2 = c_y2 & !f_y1 & c_y1) | (f_y2 = c_y2 & f_y1 = c_y1 & !f_y0 & c_y0) : FALSE;
    (f_y2 & !c_y2) | (f_y2 = c_y2 & f_y1 & !c_y1) | (f_y2 = c_y2 & f_y1 = c_y1 & f_y0 & !c_y0) : FALSE;
    TRUE : FALSE;
esac;

LTLSPEC (f_x2 != d_x2 | (f_x2 = d_x2 & f_x1 != d_x1) | (f_x2 = d_x2 & f_x1 = d_x1 & f_x0 != d_x0) | f_y2 != d_y2 | (f_y2 = d_y2 & f_y1 != d_y1) | (f_y2 = d_y2 & f_y1 = d_y1 & f_y0 != d_y0)) U (f_x2 = c_x2 & f_x1 = c_x1 & f_x0 = c_x0 & f_y2 = c_y2 & f_y1 = c_y1 & f_y0 = c_y0)

VAR       time: 0..15;
FROZENVAR maxtime: 0..15;
ASSIGN
  init(time) := 0;
  next(time) := case time < 15 : time + 1; TRUE: time; esac;
  PARSYNTH r := { maxtime | VALID (f_x2 != d_x2 | (f_x2 = d_x2 & f_x1 != d_x1) | (f_x2 = d_x2 & f_x1 = d_x1 & f_x0 != d_x0) | f_y2 != d_y2 | (f_y2 = d_y2 & f_y1 != d_y1) | (f_y2 = d_y2 & f_y1 = d_y1 & f_y0 != d_y0)) U (f_x2 = c_x2 & f_x1 = c_x1 & f_x0 = c_x0 & f_y2 = c_y2 & f_y1 = c_y1 & f_y0 = c_y0 & time<=maxtime)};
MODULE main
VAR p: Plant(c.move0,c.move1,c.move2,c.move3); c: controller(p.f_x0,p.f_x1,p.f_x2,p.f_y0,p.f_y1,p.f_y2,p.c_x0,p.c_x1,p.c_x2,p.c_y0,p.c_y1,p.c_y2,p.d_x0,p.d_x1,p.d_x2,p.d_y0,p.d_y1,p.d_y2,p.f_counter0,p.d_counter0,p.d_counter1,p.c_counter0,p.c_counter1);
