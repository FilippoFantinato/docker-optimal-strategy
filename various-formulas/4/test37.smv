MODULE controller(u1,u2)
--latches
VAR
EBR_0_ERROR_0 : boolean;
EBR_0_ERROR_6 : boolean;
EBR_0_ERROR_4 : boolean;
EBR_0_COUNTER_1 : boolean;
EBR_0_ERROR_3 : boolean;
EBR_0_ERROR_2 : boolean;
EBR_0_COUNTER_0 : boolean;
EBR_0_ERROR_7 : boolean;
EBR_0_ERROR_5 : boolean;
EBR_0_COUNTER_2 : boolean;
EBR_0_ERROR_1 : boolean;
EBR_0_COUNTER_3 : boolean;
ASSIGN
init(EBR_0_ERROR_0) := FALSE;
next(EBR_0_ERROR_0) := !a44;
init(EBR_0_ERROR_6) := FALSE;
next(EBR_0_ERROR_6) := !a66;
init(EBR_0_ERROR_4) := FALSE;
next(EBR_0_ERROR_4) := !a88;
init(EBR_0_COUNTER_1) := FALSE;
next(EBR_0_COUNTER_1) := !a102;
init(EBR_0_ERROR_3) := FALSE;
next(EBR_0_ERROR_3) := !a128;
init(EBR_0_ERROR_2) := FALSE;
next(EBR_0_ERROR_2) := !a156;
init(EBR_0_COUNTER_0) := FALSE;
next(EBR_0_COUNTER_0) := !a164;
init(EBR_0_ERROR_7) := FALSE;
next(EBR_0_ERROR_7) := !a186;
init(EBR_0_ERROR_5) := FALSE;
next(EBR_0_ERROR_5) := !a208;
init(EBR_0_COUNTER_2) := FALSE;
next(EBR_0_COUNTER_2) := !a224;
init(EBR_0_ERROR_1) := FALSE;
next(EBR_0_ERROR_1) := !a252;
init(EBR_0_COUNTER_3) := FALSE;
next(EBR_0_COUNTER_3) := !a270;
DEFINE
--ands
a20 := !EBR_0_COUNTER_1 & !EBR_0_COUNTER_0;
a22 := !EBR_0_COUNTER_2 & a20;
a24 := !EBR_0_COUNTER_3 & a22;
a26 := !EBR_0_COUNTER_2 & !EBR_0_COUNTER_1;
a28 := !EBR_0_COUNTER_3 & a26;
a30 := !a24 & a28;
a32 := a30 & a2;
a34 := a32;
a36 := FALSE;
a38 := !a34 & !a36;
a40 := EBR_0_ERROR_0;
a42 := !EBR_0_ERROR_0 & !a38;
a44 := !a40 & !a42;
a48 := !EBR_0_COUNTER_1 & !EBR_0_COUNTER_0;
a50 := !EBR_0_COUNTER_2 & a48;
a52 := !EBR_0_COUNTER_3 & a50;
a54 := a52 & a4;
a56 := a54;
a58 := FALSE;
a60 := !a56 & !a58;
a62 := EBR_0_ERROR_6;
a64 := !EBR_0_ERROR_6 & !a60;
a66 := !a62 & !a64;
a70 := !EBR_0_COUNTER_1 & !EBR_0_COUNTER_0;
a72 := !EBR_0_COUNTER_2 & a70;
a74 := !EBR_0_COUNTER_3 & a72;
a76 := a74 & a2;
a78 := a76;
a80 := FALSE;
a82 := !a78 & !a80;
a84 := EBR_0_ERROR_4;
a86 := !EBR_0_ERROR_4 & !a82;
a88 := !a84 & !a86;
a90 := EBR_0_COUNTER_0 & EBR_0_COUNTER_1;
a92 := a90 & EBR_0_COUNTER_2;
a94 := a92 & EBR_0_COUNTER_3;
a96 := EBR_0_COUNTER_0 & EBR_0_COUNTER_1;
a98 := !EBR_0_COUNTER_1 & !EBR_0_COUNTER_0;
a100 := !a96 & !a98;
a102 := !a94 & !a100;
a106 := EBR_0_COUNTER_1 & EBR_0_COUNTER_0;
a108 := !EBR_0_COUNTER_2 & !a106;
a110 := !EBR_0_COUNTER_3 & a108;
a112 := !EBR_0_COUNTER_3 & !EBR_0_COUNTER_2;
a114 := !a110 & a112;
a116 := a114 & a4;
a118 := a116;
a120 := FALSE;
a122 := !a118 & !a120;
a124 := EBR_0_ERROR_3;
a126 := !EBR_0_ERROR_3 & !a122;
a128 := !a124 & !a126;
a132 := !EBR_0_COUNTER_2 & !EBR_0_COUNTER_1;
a134 := !EBR_0_COUNTER_3 & a132;
a136 := EBR_0_COUNTER_1 & EBR_0_COUNTER_0;
a138 := !EBR_0_COUNTER_2 & !a136;
a140 := !EBR_0_COUNTER_3 & a138;
a142 := !a134 & a140;
a144 := a142 & a4;
a146 := a144;
a148 := FALSE;
a150 := !a146 & !a148;
a152 := EBR_0_ERROR_2;
a154 := !EBR_0_ERROR_2 & !a150;
a156 := !a152 & !a154;
a158 := EBR_0_COUNTER_0 & EBR_0_COUNTER_1;
a160 := a158 & EBR_0_COUNTER_2;
a162 := a160 & EBR_0_COUNTER_3;
a164 := !a162 & EBR_0_COUNTER_0;
a168 := !EBR_0_COUNTER_1 & !EBR_0_COUNTER_0;
a170 := !EBR_0_COUNTER_2 & a168;
a172 := !EBR_0_COUNTER_3 & a170;
a174 := a172 & !u2;
a176 := a174;
a178 := FALSE;
a180 := !a176 & !a178;
a182 := EBR_0_ERROR_7;
a184 := !EBR_0_ERROR_7 & !a180;
a186 := !a182 & !a184;
a190 := !EBR_0_COUNTER_1 & !EBR_0_COUNTER_0;
a192 := !EBR_0_COUNTER_2 & a190;
a194 := !EBR_0_COUNTER_3 & a192;
a196 := a194 & !u1;
a198 := a196;
a200 := FALSE;
a202 := !a198 & !a200;
a204 := EBR_0_ERROR_5;
a206 := !EBR_0_ERROR_5 & !a202;
a208 := !a204 & !a206;
a210 := EBR_0_COUNTER_0 & EBR_0_COUNTER_1;
a212 := a210 & EBR_0_COUNTER_2;
a214 := a212 & EBR_0_COUNTER_3;
a216 := EBR_0_COUNTER_1 & EBR_0_COUNTER_0;
a218 := a216 & EBR_0_COUNTER_2;
a220 := !EBR_0_COUNTER_2 & !a216;
a222 := !a218 & !a220;
a224 := !a214 & !a222;
a228 := !EBR_0_COUNTER_1 & !EBR_0_COUNTER_0;
a230 := !EBR_0_COUNTER_2 & a228;
a232 := !EBR_0_COUNTER_3 & a230;
a234 := !EBR_0_COUNTER_2 & !EBR_0_COUNTER_1;
a236 := !EBR_0_COUNTER_3 & a234;
a238 := !a232 & a236;
a240 := a238 & a4;
a242 := a240;
a244 := FALSE;
a246 := !a242 & !a244;
a248 := EBR_0_ERROR_1;
a250 := !EBR_0_ERROR_1 & !a246;
a252 := !a248 & !a250;
a254 := EBR_0_COUNTER_0 & EBR_0_COUNTER_1;
a256 := a254 & EBR_0_COUNTER_2;
a258 := a256 & EBR_0_COUNTER_3;
a260 := EBR_0_COUNTER_1 & EBR_0_COUNTER_0;
a262 := EBR_0_COUNTER_2 & a260;
a264 := a262 & EBR_0_COUNTER_3;
a266 := !EBR_0_COUNTER_3 & !a262;
a268 := !a264 & !a266;
a270 := !a258 & !a268;
a272 := !EBR_0_ERROR_4 & !EBR_0_ERROR_0;
a274 := !EBR_0_ERROR_5 & a272;
a276 := !EBR_0_ERROR_6 & !EBR_0_ERROR_1;
a278 := a276 & !EBR_0_ERROR_2;
a280 := a278 & !EBR_0_ERROR_3;
a282 := !EBR_0_ERROR_7 & a280;
a284 := !a274 & !a282;
a286 := a284;
a2 := TRUE;
a4 := TRUE;
--outputs
formula := !a286;
c1 := a2;
c2 := a4;

LTLSPEC  (u1 -> (c1 | X c1)) & (u2 -> (c2 | (X c2) | (X X c2) | (X X X c2)))

VAR       time: 0..3;
FROZENVAR maxtime: 0..3;
ASSIGN
  init(time) := 0;
  next(time) := case time < 3 : time + 1; TRUE: time; esac;
  PARSYNTH r := { maxtime | VALID  ((u1 -> F[0,1](c1 & time<=maxtime)) & (u2 -> F[0,3](c2 &time<=maxtime)))};
