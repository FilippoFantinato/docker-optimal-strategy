MODULE controller(u1,u2)
--latches
VAR
EBR_0_ERROR_4 : boolean;
EBR_0_COUNTER_1 : boolean;
EBR_0_ERROR_5 : boolean;
EBR_0_ERROR_6 : boolean;
EBR_0_COUNTER_0 : boolean;
EBR_0_COUNTER_2 : boolean;
EBR_0_ERROR_3 : boolean;
EBR_0_ERROR_0 : boolean;
EBR_0_ERROR_1 : boolean;
EBR_0_ERROR_2 : boolean;
ASSIGN
init(EBR_0_ERROR_4) := FALSE;
next(EBR_0_ERROR_4) := !a18;
init(EBR_0_COUNTER_1) := FALSE;
next(EBR_0_COUNTER_1) := !a36;
init(EBR_0_ERROR_5) := FALSE;
next(EBR_0_ERROR_5) := !a46;
init(EBR_0_ERROR_6) := FALSE;
next(EBR_0_ERROR_6) := !a66;
init(EBR_0_COUNTER_0) := FALSE;
next(EBR_0_COUNTER_0) := !a72;
init(EBR_0_COUNTER_2) := FALSE;
next(EBR_0_COUNTER_2) := !a86;
init(EBR_0_ERROR_3) := FALSE;
next(EBR_0_ERROR_3) := !a104;
init(EBR_0_ERROR_0) := FALSE;
next(EBR_0_ERROR_0) := !a114;
init(EBR_0_ERROR_1) := FALSE;
next(EBR_0_ERROR_1) := !a124;
init(EBR_0_ERROR_2) := FALSE;
next(EBR_0_ERROR_2) := !a144;
DEFINE
--ands
a12 := !EBR_0_ERROR_4 & u2;
a14 := FALSE;
a16 := !a12;
a18 := !a14 & !a16;
a24 := EBR_0_COUNTER_0 & EBR_0_COUNTER_1;
a28 := a24 & EBR_0_COUNTER_2;
a30 := EBR_0_COUNTER_0 & EBR_0_COUNTER_1;
a32 := !EBR_0_COUNTER_1 & !EBR_0_COUNTER_0;
a34 := !a30 & !a32;
a36 := !a28 & !a34;
a40 := !EBR_0_ERROR_5 & !a4;
a42 := FALSE;
a44 := !a40;
a46 := !a42 & !a44;
a48 := !EBR_0_COUNTER_1 & !EBR_0_COUNTER_0;
a50 := !EBR_0_COUNTER_2 & a48;
a54 := !EBR_0_ERROR_6 & !a4;
a56 := FALSE;
a58 := !a54;
a60 := !a56 & !a58;
a62 := FALSE;
a64 := !a50 & !a60;
a66 := !a62 & !a64;
a68 := EBR_0_COUNTER_0 & EBR_0_COUNTER_1;
a70 := a68 & EBR_0_COUNTER_2;
a72 := !a70 & EBR_0_COUNTER_0;
a74 := EBR_0_COUNTER_0 & EBR_0_COUNTER_1;
a76 := a74 & EBR_0_COUNTER_2;
a78 := EBR_0_COUNTER_1 & EBR_0_COUNTER_0;
a80 := a78 & EBR_0_COUNTER_2;
a82 := !EBR_0_COUNTER_2 & !a78;
a84 := !a80 & !a82;
a86 := !a76 & !a84;
a88 := !EBR_0_COUNTER_2 & !EBR_0_COUNTER_1;
a92 := !EBR_0_ERROR_3 & !a2;
a94 := FALSE;
a96 := !a92;
a98 := !a94 & !a96;
a100 := FALSE;
a102 := !a88 & !a98;
a104 := !a100 & !a102;
a108 := !EBR_0_ERROR_0 & u1;
a110 := FALSE;
a112 := !a108;
a114 := !a110 & !a112;
a118 := !EBR_0_ERROR_1 & !a2;
a120 := FALSE;
a122 := !a118;
a124 := !a120 & !a122;
a126 := !EBR_0_COUNTER_1 & !EBR_0_COUNTER_0;
a128 := !EBR_0_COUNTER_2 & a126;
a132 := !EBR_0_ERROR_2 & !a2;
a134 := FALSE;
a136 := !a132;
a138 := !a134 & !a136;
a140 := FALSE;
a142 := !a128 & !a138;
a144 := !a140 & !a142;
a146 := !EBR_0_ERROR_1 & !EBR_0_ERROR_2;
a148 := a146 & !EBR_0_ERROR_3;
a150 := !EBR_0_ERROR_0 & a148;
a152 := !EBR_0_ERROR_5 & !EBR_0_ERROR_6;
a154 := !EBR_0_ERROR_4 & a152;
a156 := a150 & a154;
a158 := !a156;
a2 := FALSE;
a4 := TRUE;
--outputs
formula := !a158;
c1 := a2;
c2 := a4;

LTLSPEC  F(u1 -> (c1 | (X c1) | (X X c1))) | F(u2 -> F[0,1] c2)

VAR       time: 0..3;
FROZENVAR maxtime: 0..3;
ASSIGN
  init(time) := 0;
  next(time) := case time < 3 : time + 1; TRUE: time; esac;
  PARSYNTH r := { maxtime | VALID  (F(u1 -> F[0,2](c1 & time<=maxtime)) | F(u2 -> F[0,1] (c2 & time<=maxtime)))};
