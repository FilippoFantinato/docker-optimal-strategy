MODULE controller(u)
--latches
VAR
EBR_0_ERROR_0 : boolean;
EBR_0_ERROR_2 : boolean;
EBR_0_ERROR_1 : boolean;
EBR_0_COUNTER_1 : boolean;
EBR_0_COUNTER_0 : boolean;
EBR_0_COUNTER_2 : boolean;
ASSIGN
init(EBR_0_ERROR_0) := FALSE;
next(EBR_0_ERROR_0) := !a36;
init(EBR_0_ERROR_2) := FALSE;
next(EBR_0_ERROR_2) := !a58;
init(EBR_0_ERROR_1) := FALSE;
next(EBR_0_ERROR_1) := !a78;
init(EBR_0_COUNTER_1) := FALSE;
next(EBR_0_COUNTER_1) := !a90;
init(EBR_0_COUNTER_0) := FALSE;
next(EBR_0_COUNTER_0) := !a96;
init(EBR_0_COUNTER_2) := FALSE;
next(EBR_0_COUNTER_2) := !a110;
DEFINE
--ands
a14 := !EBR_0_COUNTER_1 & !EBR_0_COUNTER_0;
a16 := !EBR_0_COUNTER_2 & a14;
a18 := !EBR_0_COUNTER_2 & !EBR_0_COUNTER_1;
a20 := !a16 & a18;
a22 := !a2 & !u;
a24 := a20 & !a22;
a26 := a24;
a28 := FALSE;
a30 := !a26 & !a28;
a32 := EBR_0_ERROR_0;
a34 := !EBR_0_ERROR_0 & !a30;
a36 := !a32 & !a34;
a40 := !EBR_0_COUNTER_1 & !EBR_0_COUNTER_0;
a42 := !EBR_0_COUNTER_2 & a40;
a44 := !a2 & !u;
a46 := a42 & !a44;
a48 := a46;
a50 := FALSE;
a52 := !a48 & !a50;
a54 := EBR_0_ERROR_2;
a56 := !EBR_0_ERROR_2 & !a52;
a58 := !a54 & !a56;
a62 := !EBR_0_COUNTER_1 & !EBR_0_COUNTER_0;
a64 := !EBR_0_COUNTER_2 & a62;
a66 := a64 & a2;
a68 := a66;
a70 := FALSE;
a72 := !a68 & !a70;
a74 := EBR_0_ERROR_1;
a76 := !EBR_0_ERROR_1 & !a72;
a78 := !a74 & !a76;
a80 := EBR_0_COUNTER_0 & EBR_0_COUNTER_1;
a82 := a80 & EBR_0_COUNTER_2;
a84 := EBR_0_COUNTER_0 & EBR_0_COUNTER_1;
a86 := !EBR_0_COUNTER_1 & !EBR_0_COUNTER_0;
a88 := !a84 & !a86;
a90 := !a82 & !a88;
a92 := EBR_0_COUNTER_0 & EBR_0_COUNTER_1;
a94 := a92 & EBR_0_COUNTER_2;
a96 := !a94 & EBR_0_COUNTER_0;
a98 := EBR_0_COUNTER_0 & EBR_0_COUNTER_1;
a100 := a98 & EBR_0_COUNTER_2;
a102 := EBR_0_COUNTER_1 & EBR_0_COUNTER_0;
a104 := a102 & EBR_0_COUNTER_2;
a106 := !EBR_0_COUNTER_2 & !a102;
a108 := !a104 & !a106;
a110 := !a100 & !a108;
a112 := EBR_0_ERROR_1 & EBR_0_ERROR_0;
a114 := !EBR_0_ERROR_2 & !a112;
a116 := !a114;
a2 := TRUE;
--outputs
formula := !a116;
c := a2;

LTLSPEC  (c | u) | (c & X (c | u))

VAR       time: 0..3;
FROZENVAR maxtime: 0..3;
ASSIGN
  init(time) := 0;
  next(time) := case time < 3 : time + 1; TRUE: time; esac;
  PARSYNTH r := { maxtime | VALID  ((c | u) | (c & X (c | u))) & G(time<=maxtime)};
