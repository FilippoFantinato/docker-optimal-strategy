MODULE controller(u)
--latches
VAR
EBR_0_COUNTER_3 : boolean;
EBR_0_SPECF_2 : boolean;
EBR_0_SPECF_3 : boolean;
EBR_0_SPECF_1 : boolean;
EBR_0_ERROR_0 : boolean;
EBR_0_SPECF_4 : boolean;
EBR_0_COUNTER_1 : boolean;
EBR_0_COUNTER_0 : boolean;
EBR_0_COUNTER_2 : boolean;
ASSIGN
init(EBR_0_COUNTER_3) := FALSE;
next(EBR_0_COUNTER_3) := !a32;
init(EBR_0_SPECF_2) := FALSE;
next(EBR_0_SPECF_2) := a2;
init(EBR_0_SPECF_3) := FALSE;
next(EBR_0_SPECF_3) := a4;
init(EBR_0_SPECF_1) := FALSE;
next(EBR_0_SPECF_1) := EBR_0_SPECF_2;
init(EBR_0_ERROR_0) := FALSE;
next(EBR_0_ERROR_0) := !a72;
init(EBR_0_SPECF_4) := FALSE;
next(EBR_0_SPECF_4) := u;
init(EBR_0_COUNTER_1) := FALSE;
next(EBR_0_COUNTER_1) := !a86;
init(EBR_0_COUNTER_0) := FALSE;
next(EBR_0_COUNTER_0) := !a94;
init(EBR_0_COUNTER_2) := FALSE;
next(EBR_0_COUNTER_2) := !a110;
DEFINE
--ands
a12 := EBR_0_COUNTER_0 & EBR_0_COUNTER_1;
a16 := a12 & EBR_0_COUNTER_2;
a20 := a16 & EBR_0_COUNTER_3;
a22 := EBR_0_COUNTER_1 & EBR_0_COUNTER_0;
a24 := EBR_0_COUNTER_2 & a22;
a26 := a24 & EBR_0_COUNTER_3;
a28 := !EBR_0_COUNTER_3 & !a24;
a30 := !a26 & !a28;
a32 := !a20 & !a30;
a42 := EBR_0_COUNTER_1 & EBR_0_COUNTER_0;
a44 := !EBR_0_COUNTER_2 & !a42;
a46 := !EBR_0_COUNTER_3 & a44;
a48 := !EBR_0_COUNTER_3 & !EBR_0_COUNTER_2;
a50 := !a46 & a48;
a54 := EBR_0_SPECF_4 & a4;
a56 := !EBR_0_SPECF_3 & !a54;
a58 := EBR_0_SPECF_1 & !a56;
a60 := a50 & a58;
a62 := a60;
a64 := FALSE;
a66 := !a62 & !a64;
a68 := EBR_0_ERROR_0;
a70 := !EBR_0_ERROR_0 & !a66;
a72 := !a68 & !a70;
a74 := EBR_0_COUNTER_0 & EBR_0_COUNTER_1;
a76 := a74 & EBR_0_COUNTER_2;
a78 := a76 & EBR_0_COUNTER_3;
a80 := EBR_0_COUNTER_0 & EBR_0_COUNTER_1;
a82 := !EBR_0_COUNTER_1 & !EBR_0_COUNTER_0;
a84 := !a80 & !a82;
a86 := !a78 & !a84;
a88 := EBR_0_COUNTER_0 & EBR_0_COUNTER_1;
a90 := a88 & EBR_0_COUNTER_2;
a92 := a90 & EBR_0_COUNTER_3;
a94 := !a92 & EBR_0_COUNTER_0;
a96 := EBR_0_COUNTER_0 & EBR_0_COUNTER_1;
a98 := a96 & EBR_0_COUNTER_2;
a100 := a98 & EBR_0_COUNTER_3;
a102 := EBR_0_COUNTER_1 & EBR_0_COUNTER_0;
a104 := a102 & EBR_0_COUNTER_2;
a106 := !EBR_0_COUNTER_2 & !a102;
a108 := !a104 & !a106;
a110 := !a100 & !a108;
a112 := EBR_0_ERROR_0;
a2 := TRUE;
a4 := TRUE;
--outputs
formula := !a112;
c1 := a2;
c2 := a4;

LTLSPEC  X(c1 & X(c2 | (u & X c2)))

VAR       time: 0..3;
FROZENVAR maxtime: 0..3;
ASSIGN
  init(time) := 0;
  next(time) := case time < 3 : time + 1; TRUE: time; esac;
  PARSYNTH r := { maxtime | VALID  (X(c1 & time<=maxtime & X((c2 & time<=maxtime) | (u & time<=maxtime & X (c2 & time<=maxtime)))))};
