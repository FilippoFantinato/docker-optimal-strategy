MODULE controller(u)
--latches
VAR
EBR_0_ERROR_10 : boolean;
EBR_0_ERROR_13 : boolean;
EBR_0_ERROR_6 : boolean;
EBR_0_ERROR_5 : boolean;
EBR_0_ERROR_3 : boolean;
EBR_0_ERROR_2 : boolean;
EBR_0_COUNTER_4 : boolean;
EBR_0_ERROR_9 : boolean;
EBR_0_ERROR_12 : boolean;
EBR_0_ERROR_4 : boolean;
EBR_0_COUNTER_1 : boolean;
EBR_0_COUNTER_0 : boolean;
EBR_0_ERROR_11 : boolean;
EBR_0_COUNTER_2 : boolean;
EBR_0_ERROR_14 : boolean;
EBR_0_ERROR_0 : boolean;
EBR_0_ERROR_1 : boolean;
EBR_0_COUNTER_3 : boolean;
EBR_0_ERROR_8 : boolean;
EBR_0_ERROR_7 : boolean;
ASSIGN
init(EBR_0_ERROR_10) := FALSE;
next(EBR_0_ERROR_10) := !a62;
init(EBR_0_ERROR_13) := FALSE;
next(EBR_0_ERROR_13) := !a88;
init(EBR_0_ERROR_6) := FALSE;
next(EBR_0_ERROR_6) := !a110;
init(EBR_0_ERROR_5) := FALSE;
next(EBR_0_ERROR_5) := !a134;
init(EBR_0_ERROR_3) := FALSE;
next(EBR_0_ERROR_3) := !a158;
init(EBR_0_ERROR_2) := FALSE;
next(EBR_0_ERROR_2) := !a180;
init(EBR_0_COUNTER_4) := FALSE;
next(EBR_0_COUNTER_4) := !a202;
init(EBR_0_ERROR_9) := FALSE;
next(EBR_0_ERROR_9) := !a226;
init(EBR_0_ERROR_12) := FALSE;
next(EBR_0_ERROR_12) := !a246;
init(EBR_0_ERROR_4) := FALSE;
next(EBR_0_ERROR_4) := !a266;
init(EBR_0_COUNTER_1) := FALSE;
next(EBR_0_COUNTER_1) := !a282;
init(EBR_0_COUNTER_0) := FALSE;
next(EBR_0_COUNTER_0) := !a292;
init(EBR_0_ERROR_11) := FALSE;
next(EBR_0_ERROR_11) := !a316;
init(EBR_0_COUNTER_2) := FALSE;
next(EBR_0_COUNTER_2) := !a334;
init(EBR_0_ERROR_14) := FALSE;
next(EBR_0_ERROR_14) := !a358;
init(EBR_0_ERROR_0) := FALSE;
next(EBR_0_ERROR_0) := !a368;
init(EBR_0_ERROR_1) := FALSE;
next(EBR_0_ERROR_1) := !a392;
init(EBR_0_COUNTER_3) := FALSE;
next(EBR_0_COUNTER_3) := !a412;
init(EBR_0_ERROR_8) := FALSE;
next(EBR_0_ERROR_8) := !a430;
init(EBR_0_ERROR_7) := FALSE;
next(EBR_0_ERROR_7) := !a454;
DEFINE
--ands
a42 := !EBR_0_COUNTER_2 & !EBR_0_COUNTER_1;
a44 := EBR_0_COUNTER_3 & !a42;
a46 := !EBR_0_COUNTER_4 & !a44;
a50 := !EBR_0_ERROR_10 & !a22;
a52 := FALSE;
a54 := !a50;
a56 := !a52 & !a54;
a58 := FALSE;
a60 := !a46 & !a56;
a62 := !a58 & !a60;
a66 := !EBR_0_COUNTER_1 & !EBR_0_COUNTER_0;
a68 := EBR_0_COUNTER_2 & !a66;
a70 := EBR_0_COUNTER_3 & a68;
a72 := !EBR_0_COUNTER_4 & !a70;
a76 := !EBR_0_ERROR_13 & !a28;
a78 := FALSE;
a80 := !a76;
a82 := !a78 & !a80;
a84 := FALSE;
a86 := !a72 & !a82;
a88 := !a84 & !a86;
a90 := EBR_0_COUNTER_2 & EBR_0_COUNTER_1;
a92 := !EBR_0_COUNTER_3 & !a90;
a94 := !EBR_0_COUNTER_4 & a92;
a98 := !EBR_0_ERROR_6 & !a14;
a100 := FALSE;
a102 := !a98;
a104 := !a100 & !a102;
a106 := FALSE;
a108 := !a94 & !a104;
a110 := !a106 & !a108;
a112 := !EBR_0_COUNTER_1 & !EBR_0_COUNTER_0;
a114 := EBR_0_COUNTER_2 & !a112;
a116 := !EBR_0_COUNTER_3 & !a114;
a118 := !EBR_0_COUNTER_4 & a116;
a122 := !EBR_0_ERROR_5 & !a12;
a124 := FALSE;
a126 := !a122;
a128 := !a124 & !a126;
a130 := FALSE;
a132 := !a118 & !a128;
a134 := !a130 & !a132;
a136 := EBR_0_COUNTER_1 & EBR_0_COUNTER_0;
a138 := !EBR_0_COUNTER_2 & !a136;
a140 := !EBR_0_COUNTER_3 & a138;
a142 := !EBR_0_COUNTER_4 & a140;
a146 := !EBR_0_ERROR_3 & !a8;
a148 := FALSE;
a150 := !a146;
a152 := !a148 & !a150;
a154 := FALSE;
a156 := !a142 & !a152;
a158 := !a154 & !a156;
a160 := !EBR_0_COUNTER_2 & !EBR_0_COUNTER_1;
a162 := !EBR_0_COUNTER_3 & a160;
a164 := !EBR_0_COUNTER_4 & a162;
a168 := !EBR_0_ERROR_2 & !a6;
a170 := FALSE;
a172 := !a168;
a174 := !a170 & !a172;
a176 := FALSE;
a178 := !a164 & !a174;
a180 := !a176 & !a178;
a182 := EBR_0_COUNTER_0 & EBR_0_COUNTER_1;
a184 := a182 & EBR_0_COUNTER_2;
a186 := a184 & EBR_0_COUNTER_3;
a188 := a186 & EBR_0_COUNTER_4;
a190 := EBR_0_COUNTER_1 & EBR_0_COUNTER_0;
a192 := EBR_0_COUNTER_2 & a190;
a194 := EBR_0_COUNTER_3 & a192;
a196 := a194 & EBR_0_COUNTER_4;
a198 := !EBR_0_COUNTER_4 & !a194;
a200 := !a196 & !a198;
a202 := !a188 & !a200;
a204 := !EBR_0_COUNTER_1 & !EBR_0_COUNTER_0;
a206 := !EBR_0_COUNTER_2 & a204;
a208 := EBR_0_COUNTER_3 & !a206;
a210 := !EBR_0_COUNTER_4 & !a208;
a214 := !EBR_0_ERROR_9 & !a20;
a216 := FALSE;
a218 := !a214;
a220 := !a216 & !a218;
a222 := FALSE;
a224 := !a210 & !a220;
a226 := !a222 & !a224;
a228 := EBR_0_COUNTER_3 & EBR_0_COUNTER_2;
a230 := !EBR_0_COUNTER_4 & !a228;
a234 := !EBR_0_ERROR_12 & !a26;
a236 := FALSE;
a238 := !a234;
a240 := !a236 & !a238;
a242 := FALSE;
a244 := !a230 & !a240;
a246 := !a242 & !a244;
a248 := !EBR_0_COUNTER_3 & !EBR_0_COUNTER_2;
a250 := !EBR_0_COUNTER_4 & a248;
a254 := !EBR_0_ERROR_4 & !a10;
a256 := FALSE;
a258 := !a254;
a260 := !a256 & !a258;
a262 := FALSE;
a264 := !a250 & !a260;
a266 := !a262 & !a264;
a268 := EBR_0_COUNTER_0 & EBR_0_COUNTER_1;
a270 := a268 & EBR_0_COUNTER_2;
a272 := a270 & EBR_0_COUNTER_3;
a274 := a272 & EBR_0_COUNTER_4;
a276 := EBR_0_COUNTER_0 & EBR_0_COUNTER_1;
a278 := !EBR_0_COUNTER_1 & !EBR_0_COUNTER_0;
a280 := !a276 & !a278;
a282 := !a274 & !a280;
a284 := EBR_0_COUNTER_0 & EBR_0_COUNTER_1;
a286 := a284 & EBR_0_COUNTER_2;
a288 := a286 & EBR_0_COUNTER_3;
a290 := a288 & EBR_0_COUNTER_4;
a292 := !a290 & EBR_0_COUNTER_0;
a294 := EBR_0_COUNTER_1 & EBR_0_COUNTER_0;
a296 := !EBR_0_COUNTER_2 & !a294;
a298 := EBR_0_COUNTER_3 & !a296;
a300 := !EBR_0_COUNTER_4 & !a298;
a304 := !EBR_0_ERROR_11 & !a24;
a306 := FALSE;
a308 := !a304;
a310 := !a306 & !a308;
a312 := FALSE;
a314 := !a300 & !a310;
a316 := !a312 & !a314;
a318 := EBR_0_COUNTER_0 & EBR_0_COUNTER_1;
a320 := a318 & EBR_0_COUNTER_2;
a322 := a320 & EBR_0_COUNTER_3;
a324 := a322 & EBR_0_COUNTER_4;
a326 := EBR_0_COUNTER_1 & EBR_0_COUNTER_0;
a328 := a326 & EBR_0_COUNTER_2;
a330 := !EBR_0_COUNTER_2 & !a326;
a332 := !a328 & !a330;
a334 := !a324 & !a332;
a336 := EBR_0_COUNTER_2 & EBR_0_COUNTER_1;
a338 := EBR_0_COUNTER_3 & a336;
a340 := !EBR_0_COUNTER_4 & !a338;
a344 := !a30 & !u;
a346 := !EBR_0_ERROR_14 & a344;
a348 := FALSE;
a350 := !a346;
a352 := !a348 & !a350;
a354 := FALSE;
a356 := !a340 & !a352;
a358 := !a354 & !a356;
a362 := !EBR_0_ERROR_0 & !a2;
a364 := FALSE;
a366 := !a362;
a368 := !a364 & !a366;
a370 := !EBR_0_COUNTER_1 & !EBR_0_COUNTER_0;
a372 := !EBR_0_COUNTER_2 & a370;
a374 := !EBR_0_COUNTER_3 & a372;
a376 := !EBR_0_COUNTER_4 & a374;
a380 := !EBR_0_ERROR_1 & !a4;
a382 := FALSE;
a384 := !a380;
a386 := !a382 & !a384;
a388 := FALSE;
a390 := !a376 & !a386;
a392 := !a388 & !a390;
a394 := EBR_0_COUNTER_0 & EBR_0_COUNTER_1;
a396 := a394 & EBR_0_COUNTER_2;
a398 := a396 & EBR_0_COUNTER_3;
a400 := a398 & EBR_0_COUNTER_4;
a402 := EBR_0_COUNTER_1 & EBR_0_COUNTER_0;
a404 := EBR_0_COUNTER_2 & a402;
a406 := a404 & EBR_0_COUNTER_3;
a408 := !EBR_0_COUNTER_3 & !a404;
a410 := !a406 & !a408;
a412 := !a400 & !a410;
a414 := !EBR_0_COUNTER_4 & !EBR_0_COUNTER_3;
a418 := !EBR_0_ERROR_8 & !a18;
a420 := FALSE;
a422 := !a418;
a424 := !a420 & !a422;
a426 := FALSE;
a428 := !a414 & !a424;
a430 := !a426 & !a428;
a432 := EBR_0_COUNTER_1 & EBR_0_COUNTER_0;
a434 := EBR_0_COUNTER_2 & a432;
a436 := !EBR_0_COUNTER_3 & !a434;
a438 := !EBR_0_COUNTER_4 & a436;
a442 := !EBR_0_ERROR_7 & !a16;
a444 := FALSE;
a446 := !a442;
a448 := !a444 & !a446;
a450 := FALSE;
a452 := !a438 & !a448;
a454 := !a450 & !a452;
a456 := EBR_0_ERROR_0 & EBR_0_ERROR_1;
a458 := a456 & EBR_0_ERROR_2;
a460 := a458 & EBR_0_ERROR_3;
a462 := a460 & EBR_0_ERROR_4;
a464 := a462 & EBR_0_ERROR_5;
a466 := a464 & EBR_0_ERROR_6;
a468 := a466 & EBR_0_ERROR_7;
a470 := a468 & EBR_0_ERROR_8;
a472 := a470 & EBR_0_ERROR_9;
a474 := a472 & EBR_0_ERROR_10;
a476 := a474 & EBR_0_ERROR_11;
a478 := a476 & EBR_0_ERROR_12;
a480 := a478 & EBR_0_ERROR_13;
a482 := a480 & EBR_0_ERROR_14;
a484 := a482;
a2 := TRUE;
a4 := TRUE;
a6 := TRUE;
a8 := TRUE;
a10 := TRUE;
a12 := TRUE;
a14 := TRUE;
a16 := TRUE;
a18 := TRUE;
a20 := TRUE;
a22 := TRUE;
a24 := TRUE;
a26 := TRUE;
a28 := TRUE;
a30 := TRUE;
--outputs
formula := !a484;
c1 := a2;
c2 := a4;
c3 := a6;
c4 := a8;
c5 := a10;
c6 := a12;
c7 := a14;
c8 := a16;
c9 := a18;
c10 := a20;
c11 := a22;
c12 := a24;
c13 := a26;
c14 := a28;
c15 := a30;

LTLSPEC F(c1) & X F(c2) &X X F(c3) & X X X F(c4) & X X X X F(c5) & X X X X X F(c6) &X X X X X X F(c7) & X X X X X X X F(c8) & X X X X X X X X F(c9) & X X X X X X X X X F(c10) & X X X X X X X X X X F(c11) & X X X X X X X X X X X F(c12) & X X X X X X X X X X X X F(c13) & X X X X X X X X X X X X X F(c14) & X X X X X X X X X X X X X X F(c15 | u)

VAR       time: 0..3;
FROZENVAR maxtime: 0..3;
ASSIGN
  init(time) := 0;
  next(time) := case time < 3 : time + 1; TRUE: time; esac;
  PARSYNTH r := { maxtime | VALID 
    F(c1 & time<=maxtime) & X F(c2 & time<=maxtime) &X X F(c3 & time<=maxtime) & X X X F(c4 & time<=maxtime) & X X X X F(c5 & time<=maxtime) & X X X X X F(c6 & time<=maxtime) &X X X X X X F(c7) & time<=maxtime & X X X X X X X F(c8 & time<=maxtime) & X X X X X X X X F(c9 & time<=maxtime) & X X X X X X X X X F(c10 & time<=maxtime) & X X X X X X X X X X F(c11 & time<=maxtime) & X X X X X X X X X X X F(c12 & time<=maxtime) & X X X X X X X X X X X X F(c13 & time<=maxtime) & X X X X X X X X X X X X X F(c14 & time<=maxtime) & X X X X X X X X X X X X X X F((c15 | u) & time<=maxtime)
  };
