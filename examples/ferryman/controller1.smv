MODULE controller(man, wolf, goat, cabbage)
VAR
-- possible moves
  move0 : boolean;
  move1 : boolean;
ASSIGN
  move0 :=
    case
      !man:
        case
          man=cabbage & man=goat & man=wolf: TRUE;
          man=cabbage & man=goat: TRUE;
          man=cabbage & man=wolf: FALSE;
          man=cabbage: TRUE;
          man=goat & man=wolf: FALSE;
          man=goat : TRUE;
          man=wolf : FALSE;
          TRUE : FALSE;
        esac;
      TRUE:
        case
          man=cabbage & man=goat: TRUE;
          man=goat & man=wolf: TRUE;
          TRUE: FALSE;
        esac;
    esac;
ASSIGN
  move1 :=
    case
      !man:
        case
          man=cabbage & man=goat & man=wolf: FALSE;
          man=cabbage & man=goat: TRUE;
          man=cabbage & man=wolf: TRUE;
          man=cabbage: TRUE;
          man=goat & man=wolf: TRUE;
          man=goat : FALSE;
          man=wolf : TRUE;
          TRUE : FALSE;
        esac;
      TRUE:
        case
          man=cabbage & man=goat: TRUE;
          man=goat & man=wolf: FALSE;
          TRUE: FALSE;
        esac;
    esac;

LTLSPEC       (goat = wolf | goat = cabbage -> goat = man) U
 (cabbage & goat & wolf & man)
FROZENVAR maxtime: 0..10;
VAR time: 0..10;
ASSIGN
init(time) := 0;
next(time) := case time < 10 : time + 1; TRUE: time; esac;
-- compute worst-case time to reach the goal
PARSYNTH r := { maxtime | VALID ((cabbage & goat & wolf & man) V ((goat = wolf | goat = cabbage -> goat = man) & time<=maxtime)) };
