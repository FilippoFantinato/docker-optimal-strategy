#!/bin/bash

#!/bin/bash

n=
formula=
controller=

c_var="c"
u_var0="u0"
u_var1="u1"

generate_module() {
    echo -e "MODULE main\nIVAR" >> $formula
    echo -e "\t$u_var0 : boolean;" >> $formula
    echo -e "\t$u_var1 : boolean;" >> $formula
    echo -e "\t$c_var : boolean;" >> $formula
}

generate_next() {
    times=$1
    next=""
    for i in `seq 1 $times`; do
        next="$next X"
    done
    echo $next
}

generate_ltl_spec() {
    ltlspec="F[0,6]($c_var <-> $u_var0) & X F[0,6](!$c_var <-> $u_var1)"
    k=$((n - 1))
    for i in `seq 1 $k`; do
        a=$(( 2 * i ))
        ltlspec="$ltlspec & `generate_next $a`(F[0,6]($c_var <-> $u_var0) & X (F[0,6](!$c_var <-> $u_var1)))"
    done
    echo -e "LTLSPEC $ltlspec"
}

generate_synth_problem() {
    synth_param="F[0,6]($c_var <-> $u_var0) & X F[0,6]((!$c_var <-> $u_var1) & time<=maxtime)"
    k=$((n - 1))
    for i in `seq 1 $k`; do
        a=$(( 2 * i ))
        synth_param="$synth_param & `generate_next $a`(F[0,6]($c_var <-> $u_var0) & X (F[0,6]((!$c_var <-> $u_var1) & time<=maxtime)))"
    done
    max_time=$((n * 7))
    echo -e "VAR       time: 0..$max_time;" >> $controller
    echo -e "FROZENVAR maxtime: 0..$max_time;" >> $controller
    echo -e "ASSIGN" >> $controller
    echo -e "  init(time) := 0;" >> $controller
    echo -e "  next(time) := case time < $max_time : time + 1; TRUE: time; esac;" >> $controller
    echo -e "PARSYNTH r := { maxtime | VALID  $synth_param};" >> $controller
}

generate_comments() {
    c_comment="--OUTPUT : c"
    u_comment="--INPUT : u0,u1"
    echo $c_comment >> $formula
    echo $u_comment >> $formula
}

generate_controller() {
    echo "MODULE controller($u_var0, $u_var1)" > $controller
    echo "VAR" >> $controller
    echo -e "\tc : boolean;" >> $controller
    echo "ASSIGN" >> $controller
    echo -e "\tinit($c_var) := TRUE;" >> $controller
    echo -e "\tnext($c_var) := !$c_var;" >> $controller
    echo `generate_ltl_spec` >> $controller
    generate_synth_problem
}

generate_formula() {
    generate_module
    echo `generate_ltl_spec` >> $formula
    generate_comments
}

main() {
    if [ -f "$formula" ]; then
        rm $formula
    fi
    if [ -f "$controller" ]; then
        rm $controller
    fi

    generate_formula
    generate_controller
}

usage() {
    echo "Usage: generate-both-single -n number --formula path"
}

while [ $# -gt 0 ]; do
  case $1 in
    -h | --help)
        usage
        exit 0
        ;;
    -f | --formula)
        formula=$2
        shift 2
        ;;
    -c | --controller)
        controller=$2
        shift 2
        ;;
    -p | --plant)
        plant=$2
        shift 2
        ;;
    -n)
        n=$2
        shift 2
        ;;
    --) 
        shift 
        break ;;
    *) >&2 echo Unsupported option: $1
       usage 
       exit 1
       ;;
  esac
done

if [ -z "$n" ] || [ -z "$controller" ]; then
    usage
    exit 1
fi

main
