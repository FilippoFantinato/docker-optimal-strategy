#/bin/bash

n=
finally=1
plant=
controller=

x_vars=()
y_vars=()

get_number_of_bits() {
    k=$1
    k=$((k + 1))
    echo "l($k)/l(2)" | bc -l | awk 'function ceil(v){ return (v == int(v)) ? v : int(v)+1 } {printf "%d", ceil($1)}'
}

fill_x_vars() {
    n_x=`get_number_of_bits $n`
    for i in `seq 0 $((n_x - 1))`; do
        x_vars+=( "x$i" )
    done
}

fill_y_vars() {
    n_y=`get_number_of_bits $n`
    for i in `seq 0 $((n_y - 1))`; do
        y_vars+=( "y$i" )
    done
}

build_positive_cube() {
    vars=("$@")
    cube=""
    for i in "${!vars[@]}"; do
        cube="$cube${vars[i]}"
        if [ $(( i+1 )) -ne ${#vars[@]} ]; then
            cube="$cube & "
        fi
    done
    echo $cube
}

build_negative_cube() {
    vars=("$@")
    cube=""
    for i in "${!vars[@]}"; do
        cube="$cube!${vars[i]}"
        if [ $(( i+1 )) -ne ${#vars[@]} ]; then
            cube="$cube & "
        fi
    done
    echo $cube
}

plant_x_next() {
    prev_vars=()
    max_x=`build_positive_cube ${x_vars[@]}`
    min_x=`build_negative_cube ${x_vars[@]}`
    for x in "${x_vars[@]}"; do
        positive_cube=`build_positive_cube "${prev_vars[@]}"`
        negative_cube=`build_negative_cube "${prev_vars[@]}"`
        if [ -n "$positive_cube" ]; then
            positive_cube="($positive_cube) &"
        fi
        if [ -n "$negative_cube" ]; then
            negative_cube="($negative_cube) &"
        fi
        echo -e "    next($x) := case" >> $plant
        echo -e "        (move_right | move_right_up | move_right_down) & $positive_cube !($max_x) : !$x;" >> $plant
        echo -e "        (move_left | move_left_up | move_left_down) & $negative_cube !($min_x) : !$x;" >> $plant
        echo -e "        TRUE : $x;" >> $plant
        echo -e "    esac;" >> $plant
        prev_vars+=( "$x" )
    done
}

plant_y_next() {
    prev_vars=()
    max_y=`build_positive_cube ${y_vars[@]}`
    min_y=`build_negative_cube ${y_vars[@]}`
    for y in "${y_vars[@]}"; do
        positive_cube=`build_positive_cube "${prev_vars[@]}"`
        negative_cube=`build_negative_cube "${prev_vars[@]}"`
        if [ -n "$positive_cube" ]; then
            positive_cube="($positive_cube) &"
        fi
        if [ -n "$negative_cube" ]; then
            negative_cube="($negative_cube) &"
        fi
        echo -e "    next($y) := case" >> $plant
        echo -e "        (move_up | move_left_up | move_right_up) & $positive_cube !($max_y) : !$y;" >> $plant
        echo -e "        (move_down | move_left_down | move_right_down) & $negative_cube !($min_y) : !$y;" >> $plant
        echo -e "        TRUE : $y;" >> $plant
        echo -e "    esac;" >> $plant
        prev_vars+=( "$y" )
    done
}

x_equals_to() {
    k=$1
    eq=""
    i=0
    while [ $k -gt 0 ] || [ $i -lt ${#x_vars[@]} ]; do
        r=$(( k % 2))
        if [ $r -eq 0 ]; then
            eq="!${x_vars[i]}$eq"
        else
            eq="${x_vars[i]}$eq"
        fi
        k=$((k / 2))
        i=$((i + 1))
        if [ $i -lt ${#x_vars[@]} ]; then
            eq=" & $eq"
        fi
    done
    echo $eq
}

y_equals_to() {
    k=$1
    eq=""
    i=0
    while [ $k -gt 0 ] || [ $i -lt ${#y_vars[@]} ]; do
        r=$((k % 2))
        if [ $r -eq 0 ]; then
            eq="!${y_vars[i]}$eq"
        else
            eq="${y_vars[i]}$eq"
        fi
        k=$((k / 2))
        i=$((i + 1))
        if [ $i -lt ${#y_vars[@]} ]; then
            eq=" & $eq"
        fi
    done
    echo $eq
}

x_less_than() {
    k=$1
    i=0
    values=()
    while [ $i -lt ${#x_vars[@]} ]; do
        r=$((k % 2))
        k=$((k / 2))
        i=$((i + 1))
        values+=( $r )
    done
    lt="FALSE"
    m=${#x_vars[@]}
    for j in `seq 0 $((m - 1))`; do
        d=`[[ ${values[j]} -eq 1 ]] && echo "|" || echo "&"`
        lt="($lt) $d !${x_vars[j]}"
    done
    
    echo $lt
}

x_greater_than() {
    k=$1
    i=0
    values=()
    while [ $i -lt ${#x_vars[@]} ]; do
        r=$((k % 2))
        k=$((k / 2))
        i=$((i + 1))
        values+=( $r )
    done
    lt="FALSE"
    m=${#x_vars[@]}
    for j in `seq 0 $((m - 1))`; do
        d=`[[ ${values[j]} -eq 1 ]] && echo "&" || echo "|"`
        lt="($lt) $d ${x_vars[j]}"
    done
    
    echo $lt
}

y_less_than() {
    k=$1
    i=0
    values=()
    while [ $i -lt ${#y_vars[@]} ]; do
        r=$((k % 2))
        k=$((k / 2))
        i=$((i + 1))
        values+=( $r )
    done
    lt="FALSE"
    m=${#y_vars[@]}
    for j in `seq 0 $((m - 1))`; do
        d=`[[ ${values[j]} -eq 1 ]] && echo "|" || echo "&"`
        lt="($lt) $d !${y_vars[j]}"
    done
    
    echo $lt
}

y_greater_than() {
    k=$1
    i=0
    values=()
    while [ $i -lt ${#y_vars[@]} ]; do
        r=$((k % 2))
        k=$((k / 2))
        i=$((i + 1))
        values+=( $r )
    done
    lt="FALSE"
    m=${#y_vars[@]}
    for j in `seq 0 $((m - 1))`; do
        d=`[[ ${values[j]} -eq 1 ]] && echo "&" || echo "|"`
        lt="($lt) $d ${y_vars[j]}"
    done
    
    echo $lt
}

generate_plant() {
    fill_x_vars
    fill_y_vars

    echo -e "MODULE Machine(move0, move1, move2, move3)" > $plant
    echo -e "VAR" >> $plant
    for x_var in "${x_vars[@]}"; do
        echo -e "   $x_var : boolean;" >> $plant
    done
    for y_var in "${y_vars[@]}"; do
        echo -e "   $y_var : boolean;" >> $plant
    done
    echo -e "DEFINE" >> $plant
    echo -e "    move_up := !move3 & !move2 & !move1 & !move0;" >> $plant
    echo -e "    move_down := !move3 & !move2 & !move1 & move0;" >> $plant
    echo -e "    move_right := !move3 & !move2 & move1 & !move0;" >> $plant
    echo -e "    move_left := !move3 & !move2 & move1 & move0;" >> $plant
    echo -e "    move_right_up := !move3 & move2 & !move1 & !move0;" >> $plant
    echo -e "    move_right_down := !move3 & move2 & !move1 & move0;" >> $plant
    echo -e "    move_left_up := !move3 & move2 & move1 & !move0;" >> $plant
    echo -e "    move_left_down := !move3 & move2 & move1 & move0;" >> $plant
    echo -e "    move_stop := move3 & !move2 & !move1 & !move0;" >> $plant
    echo -e "ASSIGN" >> $plant
    for x_var in "${x_vars[@]}"; do
        echo -e "   init($x_var) := FALSE;" >> $plant
    done
    for y_var in "${y_vars[@]}"; do
        echo -e "   init($y_var) := FALSE;" >> $plant
    done
    echo -e "ASSIGN" >> $plant
    plant_x_next
    plant_y_next
}

get_driver_module_args() {
    vars=("$@")
    args=""
    for i in "${!vars[@]}"; do
        args="$args${vars[i]}"
        if [ $((i + 1)) -ne "${#vars[@]}" ]; then
            args="$args,"
        fi
    done
    echo $args
}

generate_controller() {
    echo -e "MODULE Driver(`get_driver_module_args ${x_vars[@]} ${y_vars[@]}`)" > $controller
    echo -e "VAR" >> $controller
    echo -e "   move0: boolean;" >> $controller
    echo -e "   move1: boolean;" >> $controller
    echo -e "   move2: boolean;" >> $controller
    echo -e "   move3: boolean;" >> $controller
    echo -e "   state: 0..$n;" >> $controller
    
    echo -e "DEFINE" >> $controller
    for i in `seq 0 $n`; do
        # echo -e "   goal$i := $i;" >> $controller
        echo -e "   s$i := ((`x_equals_to $i`) & (`y_equals_to $i`));" >> $controller
    done
    echo -e "ASSIGN" >> $controller
    echo -e "move0 := case" >> $controller
    for i in `seq 0 $n`; do
        echo -e "   state=$i: case" >> $controller
        echo -e "       `x_less_than $i`  : FALSE;" >> $controller
        echo -e "       `x_greater_than $i`  : TRUE;" >> $controller
        echo -e "       `y_less_than $i`  : FALSE;" >> $controller
        echo -e "       `y_greater_than $i`  : TRUE;" >> $controller
        echo -e "       TRUE : FALSE;" >> $controller
        echo -e "   esac;" >> $controller
    done
    echo -e "   TRUE: FALSE;" >> $controller
    echo -e "esac;" >> $controller

    echo -e "move1 := case" >> $controller
    for i in `seq 0 $n`; do
        echo -e "   state=$i: case" >> $controller
        echo -e "       `x_less_than $i`  : TRUE;" >> $controller
        echo -e "       `x_greater_than $i`  : TRUE;" >> $controller
        echo -e "       `y_less_than $i`  : FALSE;" >> $controller
        echo -e "       `y_greater_than $i`  : FALSE;" >> $controller
        echo -e "       TRUE : FALSE;" >> $controller
        echo -e "   esac;" >> $controller
    done
    echo -e "   TRUE: FALSE;" >> $controller
    echo -e "esac;" >> $controller

    echo -e "move2 := case" >> $controller
    for i in `seq 0 $n`; do
        echo -e "   state=$i: case" >> $controller
        echo -e "       `x_less_than $i`  : FALSE;" >> $controller
        echo -e "       `x_greater_than $i`  : FALSE;" >> $controller
        echo -e "       `y_less_than $i`  : FALSE;" >> $controller
        echo -e "       `y_greater_than $i`  : FALSE;" >> $controller
        echo -e "       TRUE : FALSE;" >> $controller
        echo -e "   esac;" >> $controller
    done
    echo -e "   TRUE: FALSE;" >> $controller
    echo -e "esac;" >> $controller

    echo -e "move3 := case" >> $controller
    for i in `seq 0 $n`; do
        echo -e "   state=$i: case" >> $controller
        echo -e "       `x_less_than $i`  : FALSE;" >> $controller
        echo -e "       `x_greater_than $i`  : FALSE;" >> $controller
        echo -e "       `y_less_than $i`  : FALSE;" >> $controller
        echo -e "       `y_greater_than $i`  : FALSE;" >> $controller
        echo -e "       TRUE : TRUE;" >> $controller
        echo -e "   esac;" >> $controller
    done
    echo -e "   TRUE: TRUE;" >> $controller
    echo -e "esac;" >> $controller

    echo -e "init(state) := 1;" >> $controller
 
    if [[ $finally -eq 1 ]]; then
        echo -e "next(state) := case" >> $controller
        for i in `seq 1 $((n-1))`; do
            echo -e "   s$i: $((i+1));" >> $controller
        done
        echo -e "   TRUE: state;" >> $controller
        echo -e "esac;" >> $controller
    else
        echo -e "next(state) := case" >> $controller
        for i in `seq 0 $((n-1))`; do
            echo -e "   s$i: $((i+1));" >> $controller
        done
        echo -e "   s$n: 0;" >> $controller
        echo -e "   TRUE: state;" >> $controller
        echo -e "esac;" >> $controller
    fi
}

generate_ltlspec_finally() {
    ltlspec="F ((`x_equals_to 1`) & (`y_equals_to 1`))"
    for i in `seq 2 $n`; do
        ltlspec="$ltlspec & F ((`x_equals_to $i`) & (`y_equals_to $i`))"
    done
    
    echo -e "LTLSPEC $ltlspec" >> $controller
}

generate_synth_param_finally() {
    synth_param="F (s1 & time<=maxtime)"
    for i in `seq 2 $n`; do
        synth_param="$synth_param & F (s$i & time<=maxtime)"
    done
    max_time=$((n * 3))
    echo -e "VAR       time: 0..$max_time;" >> $controller
    echo -e "FROZENVAR maxtime: 0..$max_time;" >> $controller
    echo -e "ASSIGN" >> $controller
    echo -e "  init(time) := 0;" >> $controller
    echo -e "  next(time) := case time < $max_time : time + 1; TRUE: time; esac;" >> $controller
    echo -e "  PARSYNTH r := { maxtime | VALID  $synth_param};" >> $controller
}

generate_badstates() {
    bs="((`x_equals_to 2`) & (`y_equals_to 3`)) | ((`x_equals_to 3`) & (`y_equals_to 2`))"
    for i in `seq 2 $n`; do
        a=$((2*i))
        b=$((2*i + 1))
        bs="$bs | ((`x_equals_to $a`) & (`y_equals_to $b`)) | ((`x_equals_to $b`) & (`y_equals_to $a`))"
    done
    echo $bs
}

generate_ltlspec_until() {
    max_time=$((n * 3))
    bs=`generate_badstates`

    ltlspec="!($bs) U (((`x_equals_to 1`) & (`y_equals_to 1`))"
    for i in `seq 2 $n`; do
        ltlspec="$ltlspec & (!($bs) U (((`x_equals_to $i`) & (`y_equals_to $i`))"
    done
    for i in `seq 2 $n`; do
        ltlspec="$ltlspec))"
    done
    ltlspec="$ltlspec)"
    
    echo -e "LTLSPEC $ltlspec" >> $controller
}

generate_synth_param_until() {
    max_time=$((n * 6))

    bs=`generate_badstates`

    synth_param=""
    for i in `seq 1 $((n-1))`; do
        synth_param="$synth_param(!($bs) U (((`x_equals_to $i`) & (`y_equals_to $i`)) & "
    done
    synth_param="$synth_param!($bs) U (((`x_equals_to $n`) & (`y_equals_to $n`)) & (time <= maxtime))"
    for i in `seq 1 $((n-1))`; do
        synth_param="$synth_param))"
    done

    echo -e "VAR       time: 0..$max_time;" >> $controller
    echo -e "FROZENVAR maxtime: 0..$max_time;" >> $controller
    echo -e "ASSIGN" >> $controller
    echo -e "  init(time) := 0;" >> $controller
    echo -e "  next(time) := case" >> $controller
    states="s0"
    for i in `seq 1 $n`; do
    states="$states | s$i"
    done 
    echo -e "  $states : 0;" >> $controller
    echo -e "  time < $max_time : time + 1; TRUE: time; esac;" >> $controller
    echo -e "  PARSYNTH r := { maxtime | VALID  $synth_param};" >> $controller
}

main() {
    if [ -f "$plant" ]; then
        rm $plant
    fi
    if [ -f "$controller" ]; then
        rm $controller
    fi

    generate_plant
    generate_controller

    if [[ $finally -eq 1 ]]; then
        generate_ltlspec_finally
        generate_synth_param_finally
    else
        generate_ltlspec_until
        generate_synth_param_until
    fi
}

usage() {
    echo "Usage: generate-boolean-driver -n number --plant path --controller path"
}

while [ $# -gt 0 ]; do
  case $1 in
    -h | --help)
        usage
        exit 0
        ;;
    -p | --plant)
        plant=$2
        shift 2
        ;;
    -c | --controller)
        controller=$2
        shift 2
        ;;
    -n)
        n=$2
        shift 2
        ;;
    --until)
        finally=0
        shift
        ;;
    --finally)
        finally=1
        shift
        ;;
    --) 
        shift 
        break ;;
    *) >&2 echo Unsupported option: $1
       usage 
       exit 1
       ;;
  esac
done

if [ -z "$n" ] || [ -z "$plant" ] || [ -z "$controller" ]; then
    usage
    exit 1
fi

main

